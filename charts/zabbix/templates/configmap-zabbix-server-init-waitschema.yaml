{{- if and .Values.zabbixserver.enabled (gt (.Values.zabbixserver.replicaCount | int) 1) }}
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ template "zabbix.fullname" . }}-waitdbschema-script
  labels:
    app: {{ template "zabbix.fullname" . }}-waitdbschema-script
    app.kubernetes.io/name: waitdbschema-script
    helm.sh/chart: {{ include "zabbix.chart" . }}
    app.kubernetes.io/instance: {{ .Release.Name }}-waitdbschema-script
    app.kubernetes.io/managed-by: {{ .Release.Service }}-waitdbschema-script
data:
  wait_db_schema.sh: |
    #!/bin/bash

    set -o pipefail

    # Check prerequisites for MySQL database
    check_variables_mysql() {
        file_env MYSQL_ROOT_PASSWORD
        file_env MYSQL_USER
        file_env MYSQL_PASSWORD

        : ${DB_SERVER_HOST:="mysql-server"}
        : ${DB_SERVER_PORT:="3306"}
        : ${DB_SERVER_DBNAME:="zabbix"}
        : ${DB_SERVER_SCHEMA:="zabbix"}
        : ${MYSQL_DATABASE:="zabbix"}
        : ${MYSQL_INITDB_SKIP_TZINFO:="yes"}

        DB_SERVER_ROOT_USER=${MYSQL_USER:-"root"}
        DB_SERVER_ROOT_PASS=${MYSQL_ROOT_PASSWORD:-""}

        DB_SERVER_ZBX_USER=${MYSQL_USER:-"zabbix"}
        DB_SERVER_ZBX_PASS=${MYSQL_PASSWORD:-"zabbix"}
    }
    # Check prerequisites for PostgreSQL database
    check_variables_postgresql() {
        file_env POSTGRES_USER
        file_env POSTGRES_PASSWORD

        : ${DB_SERVER_HOST:="postgres-server"}
        : ${DB_SERVER_PORT:="5432"}

        DB_SERVER_ROOT_USER=${POSTGRES_USER:-"postgres"}
        DB_SERVER_ROOT_PASS=${POSTGRES_PASSWORD:-""}

        DB_SERVER_ZBX_USER=${POSTGRES_USER:-"zabbix"}
        DB_SERVER_ZBX_PASS=${POSTGRES_PASSWORD:-"zabbix"}

        : ${DB_SERVER_SCHEMA:="public"}

        DB_SERVER_DBNAME=${POSTGRES_DB:-"zabbix"}
    }

    check_db_connect_postgresql() {
        echo "********************"
        echo "* DB_SERVER_HOST: ${DB_SERVER_HOST}"
        echo "* DB_SERVER_PORT: ${DB_SERVER_PORT}"
        echo "* DB_SERVER_DBNAME: ${DB_SERVER_DBNAME}"
        echo "* DB_SERVER_SCHEMA: ${DB_SERVER_SCHEMA}"
        if [ "${DEBUG_MODE,,}" == "true" ]; then
            echo "* DB_SERVER_ZBX_USER: ${DB_SERVER_ZBX_USER}"
            echo "* DB_SERVER_ZBX_PASS: ${DB_SERVER_ZBX_PASS}"
        fi

        until psql "host=${DB_SERVER_HOST} port=${DB_SERVER_PORT} dbname=${DB_SERVER_DBNAME} user=${DB_SERVER_ZBX_USER} password=${DB_SERVER_ZBX_PASS}" -c 'SELECT 1'; do
            >&2 echo "PostgreSQL is unavailable - sleeping"
            sleep 1
        done

        >&2 echo "PostgreSQL is up - continuing..."
    }



    if [ -n "$MYSQL_USER" ] && [ -n "$MYSQL_PASSWORD" ]; then
        check_variables_mysql
        check_db_connect_mysql
    elif [ -n "$POSTGRES_USER" ] && [ -n "$POSTGRES_PASSWORD" ]; then
        check_variables_postgresql
        check_db_connect_postgresql
    else
        echo "Error: No MySQL or PostgreSQL variables were set. Please set either MYSQL_USER and MYSQL_PASSWORD or POSTGRES_USER and POSTGRES_PASSWORD."
        exit 1
    fi

    check_db_connect_mysql() {
        echo "********************"
        echo "* DB_SERVER_HOST: ${DB_SERVER_HOST}"
        echo "* DB_SERVER_PORT: ${DB_SERVER_PORT}"
        echo "* DB_SERVER_DBNAME: ${DB_SERVER_DBNAME}"
        echo "* DB_SERVER_SCHEMA: ${DB_SERVER_SCHEMA}"
        if [ "${DEBUG_MODE,,}" == "true" ]; then
            echo "* DB_SERVER_ZBX_USER: ${DB_SERVER_ZBX_USER}"
            echo "* DB_SERVER_ZBX_PASS: ${DB_SERVER_ZBX_PASS}"
        fi

        until mysql -h "${DB_SERVER_HOST}" -P "${DB_SERVER_PORT}" -u "${DB_SERVER_ZBX_USER}" -p"${DB_SERVER_ZBX_PASS}" "${DB_SERVER_DBNAME}" -e "select 1"; do
            >&2 echo "MySQL is unavailable - sleeping"
            sleep 1
        done

        >&2 echo "MySQL is up - continuing..."
    }
      
    mysql_query() {
        query="${1}"
        query_success_msg="${2}"
        query_fail_msg="${3}"
        query_result=""

        query_result=$(mysql -h "${DB_SERVER_HOST}" -P "${DB_SERVER_PORT}" -u "${DB_SERVER_ZBX_USER}" --password="${DB_SERVER_ZBX_PASS}" "${DB_SERVER_DBNAME}" -e "${query}" 2>/dev/null)

        if [ "$?" -eq 0 ]; then
            echo "${query_success_msg}"
        else
            echo "${query_fail_msg}"
            exit 1
        fi
    }
    # Check prerequisites for PostgreSQL database
    check_variables_postgresql() {
        file_env POSTGRES_USER
        file_env POSTGRES_PASSWORD

        : ${DB_SERVER_HOST:="postgres-server"}
        : ${DB_SERVER_PORT:="5432"}

        DB_SERVER_ROOT_USER=${POSTGRES_USER:-"postgres"}
        DB_SERVER_ROOT_PASS=${POSTGRES_PASSWORD:-""}

        DB_SERVER_ZBX_USER=${POSTGRES_USER:-"zabbix"}
        DB_SERVER_ZBX_PASS=${POSTGRES_PASSWORD:-"zabbix"}

        : ${DB_SERVER_SCHEMA:="public"}

        DB_SERVER_DBNAME=${POSTGRES_DB:-"zabbix"}
    }

    check_db_connect_postgresql() {
        echo "********************"
        echo "* DB_SERVER_HOST: ${DB_SERVER_HOST}"
        echo "* DB_SERVER_PORT: ${DB_SERVER_PORT}"
        echo "* DB_SERVER_DBNAME: ${DB_SERVER_DBNAME}"
        echo "* DB_SERVER_SCHEMA: ${DB_SERVER_SCHEMA}"
        if [ "${DEBUG_MODE,,}" == "true" ]; then
            echo "* DB_SERVER_ZBX_USER: ${DB_SERVER_ZBX_USER}"
            echo "* DB_SERVER_ZBX_PASS: ${DB_SERVER_ZBX_PASS}"
        fi

        until psql "host=${DB_SERVER_HOST} port=${DB_SERVER_PORT} dbname=${DB_SERVER_DBNAME} user=${DB_SERVER_ZBX_USER} password=${DB_SERVER_ZBX_PASS}" -c '\q'; do
            >&2 echo "PostgreSQL is unavailable - sleeping"
            sleep 1
        done

        >&2 echo "PostgreSQL is up - continuing..."
    }


    psql_query() {
        query="${1}"
        query_success_msg="${2}"
        query_fail_msg="${3}"
        query_result=""

        query_result=$(psql -h "${DB_SERVER_HOST}" -p "${DB_SERVER_PORT}" -U "${DB_SERVER_ZBX_USER}" -d "${DB_SERVER_DBNAME}" -c "${query}")
        if [ $? -ne 0 ]; then
            >&2 echo "${query_fail_msg}"
            exit 1
        else
            if [ "${DEBUG_MODE,,}" == "true" ]; then
                echo "${query_success_msg}"
            fi
        fi
    }


    check_db_schema_present() {
        local result=0
        if [ "${DB_TYPE}" == "MYSQL" ]; then
            echo "********** MySQL: Checking if schema is present in the database..."
            mysql_query "SELECT COUNT(1) FROM information_schema.tables WHERE table_schema='${DB_SERVER_DBNAME}' AND table_name='hosts';"
            result=$?
        elif [ "${DB_TYPE}" == "POSTGRESQL" ]; then
            echo "********** PostgreSQL: Checking if schema is present in the database..."
            psql_query "SELECT COUNT(1) FROM information_schema.tables WHERE table_schema='${DB_SERVER_SCHEMA}' AND table_name='hosts';"
            result=$?
        fi

        if [ "$result" -ne 0 ]; then
            echo "FAILED: schema is not present in the database."
            exit 1
        else
            echo "OK: schema is present in the database."
        fi
    }

    check_db_users() {
        if [ "${DEBUG_MODE,,}" == "true" ]; then
            echo "** Checking database users"
        fi
        if [ "${DB_TYPE,,}" == "postgresql" ]; then
            check_db_users_postgresql
        else
            check_db_users_mysql
        fi
    }

    wait_for_db_and_schema() {
        echo "********************"
        if [ "${DEBUG_MODE,,}" == "true" ]; then
            echo "* Waiting for database server at ${DB_SERVER_HOST}:${DB_SERVER_PORT}"
        fi

        if ! wait_for_db; then
            echo "**** Failed to connect to database server"
            exit 1
        fi

        if ! check_db_schema_present; then
            echo "**** Database schema is not present, trying to create"
            if ! create_db_schema; then
                echo "**** Failed to create database schema"
                exit 1
            fi
        fi

        if ! check_db_users; then
            echo "**** Database user is not present, trying to create"
            if ! create_db_users; then
                echo "**** Failed to create database user"
                exit 1
            fi
        fi
    }
    wait_for_db_and_schema
{{- end }}
